org: lokytech
app: egetwhy-app
service: backend

plugins:
  - serverless-export-env

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'} # default stage is 'dev'
  environment:
    USERS_TABLE: ${self:custom.usersTableName}
    POSTS_TABLE: ${self:custom.postsTableName}
    POSTHASHTAGS_TABLE: ${self:custom.postHashtagsTableName}
    CATEGORIES_TABLE: ${self:custom.categoriesTableName}
    COMMENTS_TABLE: ${self:custom.commentsTableName}
    LIKES_TABLE: ${self:custom.likesTableName}
    HASHTAGS_TABLE: ${self:custom.hashtagsTableName}
    RESET_CODES_TABLE: ${self:custom.resetCodesTableName}
    USER_INTERESTS_TABLE: ${self:custom.userInterestsTableName}
    STAGE: ${self:provider.stage}
    S3_BUCKET_NAME: ${self:custom.bucketName}

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [UsersTable, Arn]
            - Fn::GetAtt: [PostsTable, Arn]
            - Fn::GetAtt: [PostHashtagsTable, Arn]
            - Fn::GetAtt: [CategoriesTable, Arn]
            - Fn::GetAtt: [CommentsTable, Arn]
            - Fn::GetAtt: [LikesTable, Arn]
            - Fn::GetAtt: [HashtagsTable, Arn]
            - Fn::GetAtt: [ResetCodesTable, Arn]
            - Fn::GetAtt: [UserInterestsTable, Arn]

functions:
  api:
    handler: handler.handler
    events:
      - httpApi: "*"

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.usersTableName}

    PostsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: postID
            AttributeType: S
        KeySchema:
          - AttributeName: postID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.postsTableName}

    PostHashtagsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: Hashtag
            AttributeType: S
          - AttributeName: PostID
            AttributeType: S
        KeySchema:
          - AttributeName: Hashtag
            KeyType: HASH
          - AttributeName: PostID
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.postHashtagsTableName}

    CategoriesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: categoryID
            AttributeType: N
        KeySchema:
          - AttributeName: categoryID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.categoriesTableName}

    CommentsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: commentID
            AttributeType: S
        KeySchema:
          - AttributeName: commentID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.commentsTableName}

    LikesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: likeID
            AttributeType: S
        KeySchema:
          - AttributeName: likeID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.likesTableName}

    HashtagsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: hashtag
            AttributeType: S
        KeySchema:
          - AttributeName: hashtag
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.hashtagsTableName}

    ResetCodesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.resetCodesTableName}

    UserInterestsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: UserID
            AttributeType: S
        KeySchema:
          - AttributeName: UserID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.userInterestsTableName}

  Outputs:
    UsersTableArn:
      Value:
        Fn::GetAtt: [UsersTable, Arn]
      Export:
        Name: UsersTableArn-${self:provider.stage}
    UsersTableName:
      Value: ${self:custom.usersTableName}
      Export:
        Name: UsersTableName-${self:provider.stage}

    PostsTableArn:
      Value:
        Fn::GetAtt: [PostsTable, Arn]
      Export:
        Name: PostsTableArn-${self:provider.stage}
    PostsTableName:
      Value: ${self:custom.postsTableName}
      Export:
        Name: PostsTableName-${self:provider.stage}

    PostHashtagsTableArn:
      Value:
        Fn::GetAtt: [PostHashtagsTable, Arn]
      Export:
        Name: PostHashtagsTableArn-${self:provider.stage}
    PostHashtagsTableName:
      Value: ${self:custom.postHashtagsTableName}
      Export:
        Name: PostHashtagsTableName-${self:provider.stage}

    CategoriesTableArn:
      Value:
        Fn::GetAtt: [CategoriesTable, Arn]
      Export:
        Name: CategoriesTableArn-${self:provider.stage}
    CategoriesTableName:
      Value: ${self:custom.categoriesTableName}
      Export:
        Name: CategoriesTableName-${self:provider.stage}

    CommentsTableArn:
      Value:
        Fn::GetAtt: [CommentsTable, Arn]
      Export:
        Name: CommentsTableArn-${self:provider.stage}
    CommentsTableName:
      Value: ${self:custom.commentsTableName}
      Export:
        Name: CommentsTableName-${self:provider.stage}

    LikesTableArn:
      Value:
        Fn::GetAtt: [LikesTable, Arn]
      Export:
        Name: LikesTableArn-${self:provider.stage}
    LikesTableName:
      Value: ${self:custom.likesTableName}
      Export:
        Name: LikesTableName-${self:provider.stage}

    HashtagsTableArn:
      Value:
        Fn::GetAtt: [HashtagsTable, Arn]
      Export:
        Name: HashtagsTableArn-${self:provider.stage}
    HashtagsTableName:
      Value: ${self:custom.hashtagsTableName}
      Export:
        Name: HashtagsTableName-${self:provider.stage}

    ResetCodesTableArn:
      Value:
        Fn::GetAtt: [ResetCodesTable, Arn]
      Export:
        Name: ResetCodesTableArn-${self:provider.stage}
    ResetCodesTableName:
      Value: ${self:custom.resetCodesTableName}
      Export:
        Name: ResetCodesTableName-${self:provider.stage}

    UserInterestsTableArn:
      Value:
        Fn::GetAtt: [UserInterestsTable, Arn]
      Export:
        Name: UserInterestsTableArn-${self:provider.stage}
    UserInterestsTableName:
      Value: ${self:custom.userInterestsTableName}
      Export:
        Name: UserInterestsTableName-${self:provider.stage}

custom:
  usersTableName: "users-table-${self:provider.stage}"
  postsTableName: "posts-table-${self:provider.stage}"
  postHashtagsTableName: "posthashtags-table-${self:provider.stage}"
  categoriesTableName: "categories-table-${self:provider.stage}"
  commentsTableName: "comments-table-${self:provider.stage}"
  likesTableName: "likes-table-${self:provider.stage}"
  hashtagsTableName: "hashtags-table-${self:provider.stage}"
  resetCodesTableName: "reset-codes-table-${self:provider.stage}"
  userInterestsTableName: "user-interests-table-${self:provider.stage}"
  bucketName: "egetwhy-bucket-${self:provider.stage}"
  export-env:
    filename: .env
    overwrite: true
    enableOffline: true

package:
  exclude:
    - node_modules/**
    - .git/**
    - .vscode/**
    - README.md
    - package-lock.json
