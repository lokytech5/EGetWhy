service: auth-api

plugins:
  - serverless-export-env

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'} # Default to 'dev' if not specify
  environment:
    USERS_TABLE:
      "Fn::ImportValue": UsersTableName-${self:provider.stage}
    RESET_CODES_TABLE:
      "Fn::ImportValue": ResetCodesTableName-${self:provider.stage}
    COGNITO_CLIENT_ID: ${env:COGNITO_CLIENT_ID}
    COGNITO_CLIENT_SECRET: ${env:COGNITO_CLIENT_SECRET}
    COGNITO_USER_POOL_ID: ${env:COGNITO_USER_POOL_ID}
    SENDGRID_API_KEY: ${env:SENDGRID_API_KEY}
    S3_BUCKET_NAME: ${env:S3_BUCKET_NAME}
    STAGE: ${self:provider.stage}

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "Fn::ImportValue": UsersTableArn-${self:provider.stage}
            - "Fn::ImportValue": ResetCodesTableArn-${self:provider.stage}
        - Effect: Allow
          Action:
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminSetUserPassword
            - cognito-idp:AdminInitiateAuth
            - cognito-idp:InitiateAuth
            - cognito-idp:SignUp
            - cognito-idp:AdminUserGlobalSignOut
            - cognito-idp:AdminGetUser
          Resource:
            - arn:aws:cognito-idp:us-east-1:058264434140:userpool/${env:COGNITO_USER_POOL_ID}
        - Effect: Allow
          Action:
            - lambda:InvokeFunction
          Resource:
            - arn:aws:lambda:us-east-1:058264434140:function:sendWelcomeEmail-${self:provider.stage}
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:ListBucket
          Resource:
            - arn:aws:s3:::${env:S3_BUCKET_NAME}
            - arn:aws:s3:::${env:S3_BUCKET_NAME}/*

functions:
  createUser:
    handler: src/server.handler
    events:
      - http:
          path: auth/signup
          method: post
          cors:
            origin: "*"
            headers:
              - Content-Type
              - Authorization
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
            allowCredentials: true
          request:
            schema:
              application/json: ${file(schemas/createUser.json)}

  loginUser:
    handler: src/server.handler
    events:
      - http:
          path: auth/login
          method: post
          cors:
            origin:
              - "*"
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true
          request:
            schema:
              application/json: ${file(schemas/loginUser.json)}

  verifyUser:
    handler: src/server.handler
    events:
      - http:
          path: auth/verify
          method: post
          cors:
            origin:
              - "*"
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true
          request:
            schema:
              application/json: ${file(schemas/verifyUser.json)}

  generatePasswordResetCode:
    handler: src/server.handler
    events:
      - http:
          path: auth/reset-password-code
          method: post
          cors:
            origin:
              - "*"
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true
          request:
            schema:
              application/json: ${file(schemas/generatePasswordResetCode.json)}

  resetPassword:
    handler: src/server.handler
    events:
      - http:
          path: auth/reset-password
          method: post
          cors:
            origin:
              - "http://localhost:3000"
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true
          request:
            schema:
              application/json: ${file(schemas/resetPassword.json)}

  sendWelcomeEmail:
    handler: src/sendWelcomeEmail.handler
    name: sendWelcomeEmail-${self:provider.stage}
    events: []

custom:
  export-env:
    filename: .env
    overwrite: true
    enableOffline: true

package:
  individually: true
  include:
    - schemas/**
  exclude:
    - node_modules/**
    - .git/**
    - .vscode/**
    - README.md
    - package-lock.json
