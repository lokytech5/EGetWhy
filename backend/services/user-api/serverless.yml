service: user-api

plugins:
  - serverless-export-env

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  stage: ${opt:stage, 'dev'}  # Default to 'dev' if not specified
  environment:
    USERS_TABLE: ${env:USERS_TABLE}
    USER_INTERESTS_TABLE:
      "Fn::ImportValue": UserInterestsTableName-${self:provider.stage}
    COGNITO_CLIENT_ID: ${env:COGNITO_CLIENT_ID}
    COGNITO_CLIENT_SECRET: ${env:COGNITO_CLIENT_SECRET}
    COGNITO_USER_POOL_ID: ${env:COGNITO_USER_POOL_ID}
    SENDGRID_API_KEY: ${env:SENDGRID_API_KEY}
    S3_BUCKET_NAME: user-profile-egetwhy-pictures-${self:provider.stage}
    STAGE: ${self:provider.stage}

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: 
            - 'Fn::ImportValue': UsersTableArn-${self:provider.stage}
            - 'Fn::ImportValue': UserInterestsTableArn-${self:provider.stage}
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:ListBucket
          Resource: 
            - arn:aws:s3:::user-profile-egetwhy-pictures-${self:provider.stage}
            - arn:aws:s3:::user-profile-egetwhy-pictures-${self:provider.stage}/*

functions:
  getUserById:
    handler: src/server.handler
    events:
      - http:
          path: users/{userId}
          method: get
          cors: 
            origin: "http://localhost:3000"
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true

  uploadProfilePicture:
    handler: src/server.handler
    events:
      - http:
          path: users/upload-profile-picture
          method: post
          cors: 
            origin: "http://localhost:3000"
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true
          request:
            schemas:
              application/json: ${file(schemas/uploadProfilePicture.json)}

  getUserProfile:
    handler: src/server.handler
    events:
      - http:
          path: me
          method: get
          cors: 
            origin: "http://localhost:3000"
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true

  updateUser:
    handler: src/server.handler
    events:
      - http:
          path: users/update
          method: put
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true
          request:
            schemas:
              application/json: ${file(schemas/updateUser.json)}

  clearUserInterests:
    handler: src/server.handler
    events:
      - http:
          path: users/{userId}/clear-interests
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true
          request:
            schemas:
              application/json: ${file(schemas/clearUserInterests.json)}
          
resources:
  Resources:
    ProfilePicturesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName:
           Fn::Sub: user-profile-egetwhy-pictures-${self:provider.stage}

package:
  individually: true
  include:
    - schemas/**
  exclude:
    - node_modules/**
    - .git/**
    - .vscode/**
    - README.md
    - package-lock.json
