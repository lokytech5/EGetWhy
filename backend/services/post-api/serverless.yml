service: post-api

plugins:
  - serverless-export-env

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  environment:
    USERS_TABLE: ${cf:backend-${self:provider.stage}.UsersTableName}
    POSTS_TABLE: ${self:custom.projectPrefix}-posts-table-${self:provider.stage}
    POSTHASHTAGS_TABLE: ${self:custom.projectPrefix}-posthashtags-table-${self:provider.stage}
    CATEGORIES_TABLE: ${self:custom.projectPrefix}-categories-table-${self:provider.stage}
    COMMENTS_TABLE: ${self:custom.projectPrefix}-comments-table-${self:provider.stage}
    LIKES_TABLE: ${self:custom.projectPrefix}-likes-table-${self:provider.stage}
    HASHTAGS_TABLE: ${self:custom.projectPrefix}-hashtags-table-${self:provider.stage}
    COGNITO_CLIENT_ID: ${env:COGNITO_CLIENT_ID}
    COGNITO_CLIENT_SECRET: ${env:COGNITO_CLIENT_SECRET}
    COGNITO_USER_POOL_ID: ${env:COGNITO_USER_POOL_ID}
    SENDGRID_API_KEY: ${env:SENDGRID_API_KEY}
    S3_BUCKET_NAME: ${env:S3_BUCKET_NAME}


  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:BatchWriteItem
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:BatchGetItem
          Resource: 
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.projectPrefix}-posts-table-${self:provider.stage}
            - arn:aws:dynamodb:${self:provider.region}:*:index/HashtagsIndex
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.projectPrefix}-comments-table-${self:provider.stage}
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.projectPrefix}-categories-table-${self:provider.stage}
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.projectPrefix}-likes-table-${self:provider.stage}
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.projectPrefix}-posthashtags-table-${self:provider.stage}

custom:
  projectPrefix: egetwhy

functions:
  createPost:
    handler: src/server.handler
    events:
      - http:
          path: api/posts
          method: post
          cors:
            origin: "http://localhost:3000"
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true
          request:
            schemas:
              application/json: ${file(schemas/createPost.json)}

  getAllPosts:
    handler: src/server.handler
    events:
      - http:
          path: api/feed
          method: get
          cors:
            origin: "http://localhost:3000"
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true

  getTrendingHashtags:
    handler: src/server.handler
    events:
      - http:
          path: api/hashtags/trending
          method: get
          cors:
            origin: "http://localhost:3000"
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true

  getPostById:
    handler: src/server.handler
    events:
      - http:
          path: api/posts/{postId}
          method: get
          cors:
            origin: "http://localhost:3000"
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true

  getPostByHashtag:
    handler: src/server.handler
    events:
      - http:
          path: api/hashtags/{hashtag}/posts
          method: get
          cors:
            origin: "http://localhost:3000"
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true

  getPostLikes:
    handler: src/server.handler
    events:
      - http:
          path: api/posts/{postId}/likes
          method: get
          cors:
            origin: "http://localhost:3000"
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true

  getCommentsByPostId:
    handler: src/server.handler
    events:
      - http:
          path: api/posts/{postId}/comments/list
          method: get
          cors:
            origin: "http://localhost:3000"
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true

  addComment:
    handler: src/server.handler
    events:
      - http:
          path: api/posts/{postId}/comments
          method: post
          cors:
            origin: "http://localhost:3000"
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true
          request:
            schemas:
              application/json: ${file(schemas/addComment.json)}

  likePost:
    handler: src/server.handler
    events:
      - http:
          path: api/posts/{postId}/like
          method: post
          cors:
            origin: "http://localhost:3000"
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true
          request:
            schemas:
              application/json: ${file(schemas/likePost.json)}

  getBatchLikesAndComments:
    handler: src/server.handler
    events:
      - http:
          path: api/posts/batchLikesAndComments
          method: post
          cors:
            origin: "http://localhost:3000"
            headers:
              - Content-Type
              - Authorization
            allowCredentials: true
          
resources:
  Resources:
    PostsTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:provider.environment.POSTS_TABLE}
        AttributeDefinitions:
          - AttributeName: "PostID"
            AttributeType: "S"
          - AttributeName: "Hashtags"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "PostID"
            KeyType: "HASH"
        GlobalSecondaryIndexes:
          - IndexName: "HashtagsIndex"
            KeySchema:
              - AttributeName: "Hashtags"
                KeyType: "HASH"
            Projection:
              ProjectionType: "ALL"
        BillingMode: PAY_PER_REQUEST

    CategoriesTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:provider.environment.CATEGORIES_TABLE}
        AttributeDefinitions:
          - AttributeName: "CategoryID"
            AttributeType: "N"
        KeySchema:
          - AttributeName: "CategoryID"
            KeyType: "HASH"
        BillingMode: PAY_PER_REQUEST

    PostHashtagsTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:provider.environment.POSTHASHTAGS_TABLE}
        AttributeDefinitions:
          - AttributeName: "Hashtag"
            AttributeType: "S"
          - AttributeName: "PostID"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "Hashtag"
            KeyType: "HASH"
          - AttributeName: "PostID"
            KeyType: "RANGE"
        BillingMode: PAY_PER_REQUEST

    CommentsTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:provider.environment.COMMENTS_TABLE}
        AttributeDefinitions:
          - AttributeName: "CommentID"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "CommentID"
            KeyType: "HASH"
        BillingMode: PAY_PER_REQUEST

    LikesTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:provider.environment.LIKES_TABLE}
        AttributeDefinitions:
          - AttributeName: "LikeID"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "LikeID"
            KeyType: "HASH"
        BillingMode: PAY_PER_REQUEST


package:
  individually: true
  include:
    - schemas/**
  exclude:
    - node_modules/**
    - .git/**
    - .vscode/**
    - README.md
    - package-lock.json
